<pre class='metadata'>
Title: Language Evolution status after Belfast 2019
Shortname: P1018
Revision: 5
Audience: WG21, EWG
Status: P
Group: WG21
URL: http://wg21.link/P1018r5
!Source: <a href="https://github.com/jfbastien/papers/blob/master/source/P1018r5.bs">github.com/jfbastien/papers/blob/master/source/P1018r5.bs</a>
Editor: JF Bastien, Apple, jfbastien@apple.com
Date: 2020-01-04
Markup Shorthands: markdown yes
Toggle Diffs: no
No abstract: false
Abstract: This paper is a collection of items that language Evolution has worked on in the latest C++ meeting, their status, and plans for the future.
</pre>

Executive summary {#summary}
=================

Most time was spent in ballot resolution for C++20, to address National Body comments in [[N4844]].


Work highlights {#high}
===============

Language Evolution received roughly 100 National Body comments. We did at least one round of discussion on all of these comments.

* Concepts: allow requires clauses on non-template friend functions of class templates.
* Coroutines: most comments rejected, a few sent away to write a paper.
* Undefined Behavior: deferred addressing all comments to C++23.
* Feature test macros: comments were addressed.
* Modules: many comments, including fixing issues around header units.
* Changed how non-type template parameters work: allow types with all public members, all of which can themselves be used as NTTPs. This allows array members, reference members, pointers and references to subobjects, floating-point, and unions.
* Began discussing some papers targeted at C++23.


National Body comment details {#nb-details}
=============================

Miscellaneous NB comments:

<ul>
<li>Late-CH01 — <a href="https://github.com/cplusplus/nbballot/issues/375">11.3.5 [class.copy.assgn] p2,5 Defaulted copy and move assignment should have ref-qualifier</a> rejected
<li>FR222 — <a href="https://github.com/cplusplus/nbballot/issues/219">20.15.10 Replace std::is_constant_evaluated with "if consteval" P1938</a> rejected
<li>US129 — <a href="https://github.com/cplusplus/nbballot/issues/128">15.1 Rename __has_cpp_attribute to __has_attribute</a> rejected
<li>US056 — <a href="https://github.com/cplusplus/nbballot/issues/55">09.03 [dcl.init] Revert P0960 (parenthesized initialization of aggregates)</a> accepted
<li>US055 — <a href="https://github.com/cplusplus/nbballot/issues/54">09.02.3.5 [dcl.fct].18 Parameter with placeholder-type-specifier and default argument is valid but useless</a> rejected
<li>GB051 — <a href="https://github.com/cplusplus/nbballot/issues/50">08.05.4 Range-based for-loop should use ranges::begin/end</a> rejected
<li>US040 — <a href="https://github.com/cplusplus/nbballot/issues/39">06.06.2 [intro.object] Adopt implicit object creation P0593</a> accepted
<li>RU011 — <a href="https://github.com/cplusplus/nbballot/issues/11">[dcl.fct.def.general].8 Make <code>__func__</code> usable in constant expressions</a> rejected
<li>RU007 — <a href="https://github.com/cplusplus/nbballot/issues/7">[basic.life].8.3 Relax pointer value / aliasing rules</a> accepted
<li>US212 — <a href="https://github.com/cplusplus/nbballot/issues/209">20.07.3.1 [variant.ctor] Suprising variant construction LWG3228</a> forwarded by CWG, accepted as proposed by CWG
</ul>

using enum:

<ul>
<li>US043 — <a href="https://github.com/cplusplus/nbballot/issues/42">06.08 [basic.def].2.17 "using enum" feature is too subtle</a> rejected
<li>US070 — <a href="https://github.com/cplusplus/nbballot/issues/69">09.06.2 [enum.udecl] Keep the "using enum" language feature in C++20</a> not relevant given above rejection
</ul>

Non-type template parameters:

<ul>
<li>US114 — <a href="https://github.com/cplusplus/nbballot/issues/113">13.05 p1.5 Class types as non-type template arguments</a> accepted
<li>US102 — <a href="https://github.com/cplusplus/nbballot/issues/101">13.1 p4.1 Allow non-type template parameters of floating-point type P1714</a> with US114
<li>US092 — <a href="https://github.com/cplusplus/nbballot/issues/91">11.10.01 [class.compare.default] p04.2.1 Array members should have strong structural equality</a> with US114
<li>US091 — <a href="https://github.com/cplusplus/nbballot/issues/90">11.10.01 p04.1 Strong structural equality for enums</a> rejected
</ul>

Concepts:

<ul>
<li>CA378 — <a href="https://github.com/cplusplus/nbballot/issues/374">Remove constrained non-template functions</a> accepted
<li>US115 — <a href="https://github.com/cplusplus/nbballot/issues/114">13.6.4 [temp.friend] Hidden non-template friends need a requires-clause</a> accepted
<li>US111 — <a href="https://github.com/cplusplus/nbballot/issues/110">13.04.3 p1 Constraint normalization should also normalize negation</a> accepted
<li>PL103 — <a href="https://github.com/cplusplus/nbballot/issues/102">13.01 [temp.param] Elaborate syntax for constrained type template parameters</a> rejected
<li>US098 — <a href="https://github.com/cplusplus/nbballot/issues/97">13 p6 `Concept<X>` as type-constraint vs. id-expression</a> rejected
<li>US058 — <a href="https://github.com/cplusplus/nbballot/issues/57">09.04.1 Validity of bodies of non-templated functions with unsatisifed constraints</a> accepted CWG with CA378 accepted
<li>GB046 — <a href="https://github.com/cplusplus/nbballot/issues/45">07.05.4 Allow caching of evaluations of concept specializations</a> will see in Prague
<li>RU012 — <a href="https://github.com/cplusplus/nbballot/issues/12">[expr.prim.req].6 Incomplete types in requires-expressions should be ill-formed</a> rejected
</ul>

Coroutines:

<ul>
<li>US370 — <a href="https://github.com/cplusplus/nbballot/issues/366">Remove coroutines, revert P0912</a> rejected
<li>BG049 — <a href="https://github.com/cplusplus/nbballot/issues/48">7.06.2.3 p3.7 Remove await_suspend() that returns void/bool</a> rejected
<li>BG369 — <a href="https://github.com/cplusplus/nbballot/issues/365">07.06.2.3 p6 Do not use await_suspend returning void in example</a> rejected
<li>FR068 — <a href="https://github.com/cplusplus/nbballot/issues/67">09.05.4 Rename promise_type::final_suspend</a> rejected
<li>FR067 — <a href="https://github.com/cplusplus/nbballot/issues/66">09.05.4 Reduce number of coroutines customization points P1477</a> rejected
<li>US062 — <a href="https://github.com/cplusplus/nbballot/issues/61">09.04.4 [dcl.fct.def.coroutine].5 Make unhandled_exception in promise types optional</a> will see in Prague
<li>FR066 — <a href="https://github.com/cplusplus/nbballot/issues/65">09.05.4 Make unhandled_exception in promise types optional</a> with US062
<li>US061 — <a href="https://github.com/cplusplus/nbballot/issues/60">09.04.4 p10 Coroutine allocation should consider std::align_val_t</a> will see in Prague
<li>BG059 — <a href="https://github.com/cplusplus/nbballot/issues/58">09.04.4 Consistent naming for get_return_object, initial_suspend, final_suspend</a> rejected
<li>BG060 — <a href="https://github.com/cplusplus/nbballot/issues/59">09.04.4 Fix names of Promise functions</a> rejected
<li>BG048 — <a href="https://github.com/cplusplus/nbballot/issues/47">07.06.2.3 Rename await_suspend and await_resume</a> rejected
<li>US071 — <a href="https://github.com/cplusplus/nbballot/issues/70">09.09.4 [dcl.fct.def.coroutine] p1 Rename coroutine keywords away from co_ P1485</a> rejected
<li>FR179 — <a href="https://github.com/cplusplus/nbballot/issues/177">7.12.03.2 Remove coroutine_handle::from_/address</a> rejected
<li>FR001 — <a href="https://github.com/cplusplus/nbballot/issues/1">Allow separation of coroutine_handle and suspend points</a> rejected
<li>BG180 — <a href="https://github.com/cplusplus/nbballot/issues/178">17.12.05 Fix example using await_suspend</a> rejected
</ul>

Undefined Behavior:

<ul>
<li>US368, US149, US148, US145, US144, US143, US142, US141, US131, US130, US027, US024 — Undefined Behavior in the preprocessor rejected
<li>RU008 — <a href="https://github.com/cplusplus/nbballot/issues/8">[class.cdtor].2 Clarify value of *this during construction</a> rejected
</ul>

Modules: seen by SG2, mostly accepted their recommendations.

Unicode:

<ul>
<li>NL029 — <a href="https://github.com/cplusplus/nbballot/issues/28">05.10 [tab:lex.name.allowed] Disallow zero-width and control characters</a> rejected
</ul>

Feature test macros:

All addressed by [[P1902r1]].

<ul>
<li>US150 — <a href="https://github.com/cplusplus/nbballot/issues/149">15.10 [cpp.predefined] Add feature-test macro for "familiar template syntax for generic lambdas" P1902</a> accepted
<li>GB147 — <a href="https://github.com/cplusplus/nbballot/issues/146">15.10 Add a feature-test macro for "consteval" P1902</a> accepted
<li>GB146 — <a href="https://github.com/cplusplus/nbballot/issues/145">15.10 Add a feature-test macro for concepts P1902</a> accepted
</ul>


C++23 discussions {#cpp32}
=================

We started discussing a few papers which could make it to C++23.

* Floating-point types from [[P1467r2]] and [[P1468r2]] received strong support.
* [[P1105r1]] freestanding: there's ongoing interest in better supporting freestanding targets, and we gave direction to the author.
* [[P1371r1]] Pattern matching: moving along, but the authors need help with implementation / usage experience if we want this to make C++23.
* [[P1040r4]] `std::embed`: was seen by this group and others, and received confusing feedback, though most many people agree there's something useful to be had here.
* [[P1219r2]] Homogeneous variadic function parameters: did not receive sufficient support to move forward.
* [[P1097r2]] Named character escapes: received feedback, will see again.
* [[P1895r0]] tag_invoke: A general pattern for supporting customisable functions: the general feeling was that there were some concerns with a library-only solution to the problem. Several interested parties are planning on working with the paper authors to try to come up with such a language feature.
* [[P1676r0]] C++ Exception Optimizations. An experiment: informative discussion.
* [[P1365r0]] Using Coroutine TS with zero dynamic allocations: informative discussion.
* [[P1046r1]] Automatically Generate More Operators: received feedback, fairly positive.
* [[P1908r0]] Reserving Attribute Names for Future Use: accepted, sent to CWG.
* [[P0876r9]] `fiber_context` - fibers without scheduler: targets a TS. Gave feedback, will see again.
* [[P1061r1]] Structured Bindings can introduce a Pack: approve of general direction.
* [[P1839r1]] Accessing Object Representations: approve of general direction.


Near-future EWG plans {#future}
=====================

There will still be some ballot resolution work in Prague, to address comments which we discussed but haven't resolved in Belfast. There will be no further ballot resolution after Prague.

Ballot resolution will likely take a small portion of our time. Once that is done, Language Evolution will switch into full C++23 mode, likely following the plans outlined in [[P0592r3]]. These plans were discussed in multiple groups and received strong support.
